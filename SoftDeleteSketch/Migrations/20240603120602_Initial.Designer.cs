// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SoftDeleteSketch.Entities;

#nullable disable

namespace SoftDeleteSketch.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240603120602_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SoftDeleteSketch.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OwnerId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4885-84a2-8c619355244c"),
                            IsDeleted = false,
                            Name = "Blog 1",
                            OwnerId = new Guid("b18400c7-68f7-4f0c-b667-f8850e942a48")
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-49f8-a59e-1c43b8c22e77"),
                            IsDeleted = false,
                            Name = "Blog 4",
                            OwnerId = new Guid("b18400c7-68f7-4f0c-b667-f8850e942a48")
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4fdf-9b4d-c4409a1724d9"),
                            IsDeleted = false,
                            Name = "Blog 2",
                            OwnerId = new Guid("b18400c7-68f7-49ca-9c4b-4b8dbea62eee")
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4763-abc3-acff4006d0bb"),
                            IsDeleted = false,
                            Name = "Blog 5",
                            OwnerId = new Guid("b18400c7-68f7-49ca-9c4b-4b8dbea62eee")
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-47ee-b7df-af900a550471"),
                            IsDeleted = false,
                            Name = "Blog 3",
                            OwnerId = new Guid("b18400c7-68f7-45a7-ba0a-3eeeac9bb969")
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4a9b-a636-5a069471fd56"),
                            IsDeleted = false,
                            Name = "Blog 6",
                            OwnerId = new Guid("b18400c7-68f7-45a7-ba0a-3eeeac9bb969")
                        });
                });

            modelBuilder.Entity("SoftDeleteSketch.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4f0c-b667-f8850e942a48"),
                            IsDeleted = false,
                            Name = "Person 1"
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-49ca-9c4b-4b8dbea62eee"),
                            IsDeleted = false,
                            Name = "Person 2"
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-45a7-ba0a-3eeeac9bb969"),
                            IsDeleted = false,
                            Name = "Person 3"
                        });
                });

            modelBuilder.Entity("SoftDeleteSketch.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletionDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4051-956a-9ad3ad25fc11"),
                            AuthorId = new Guid("b18400c7-68f7-4f0c-b667-f8850e942a48"),
                            BlogId = new Guid("b18400c7-68f7-4885-84a2-8c619355244c"),
                            Content = "Content 1",
                            IsDeleted = false,
                            Title = "Post 1"
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4ed2-883d-52be39aa5d10"),
                            AuthorId = new Guid("b18400c7-68f7-4f0c-b667-f8850e942a48"),
                            BlogId = new Guid("b18400c7-68f7-49f8-a59e-1c43b8c22e77"),
                            Content = "Content 1",
                            IsDeleted = false,
                            Title = "Post 4"
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4713-8267-1f404f0b1a88"),
                            AuthorId = new Guid("b18400c7-68f7-49ca-9c4b-4b8dbea62eee"),
                            BlogId = new Guid("b18400c7-68f7-4fdf-9b4d-c4409a1724d9"),
                            Content = "Content 2",
                            IsDeleted = false,
                            Title = "Post 2"
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4866-ae8d-75d223e75a43"),
                            AuthorId = new Guid("b18400c7-68f7-49ca-9c4b-4b8dbea62eee"),
                            BlogId = new Guid("b18400c7-68f7-4763-abc3-acff4006d0bb"),
                            Content = "Content 2",
                            IsDeleted = false,
                            Title = "Post 5"
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-4061-a5bf-5706d1b064a9"),
                            AuthorId = new Guid("b18400c7-68f7-45a7-ba0a-3eeeac9bb969"),
                            BlogId = new Guid("b18400c7-68f7-47ee-b7df-af900a550471"),
                            Content = "Content 3",
                            IsDeleted = false,
                            Title = "Post 3"
                        },
                        new
                        {
                            Id = new Guid("b18400c7-68f7-46a7-ab22-949807d4abdf"),
                            AuthorId = new Guid("b18400c7-68f7-45a7-ba0a-3eeeac9bb969"),
                            BlogId = new Guid("b18400c7-68f7-4a9b-a636-5a069471fd56"),
                            Content = "Content 2",
                            IsDeleted = false,
                            Title = "Post 6"
                        });
                });

            modelBuilder.Entity("SoftDeleteSketch.Entities.Blog", b =>
                {
                    b.HasOne("SoftDeleteSketch.Entities.Person", "Owner")
                        .WithMany("Blogs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SoftDeleteSketch.Entities.Post", b =>
                {
                    b.HasOne("SoftDeleteSketch.Entities.Person", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftDeleteSketch.Entities.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("SoftDeleteSketch.Entities.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SoftDeleteSketch.Entities.Person", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
